/* Generated By:JavaCC: Do not edit this line. TintoHeaderParser.java */
//------------------------------------------------------------------//
//                        COPYRIGHT NOTICE                          //
//------------------------------------------------------------------//
// Copyright (c) 2008, Francisco José Moreno Velo                   //
// All rights reserved.                                             //
//                                                                  //
// Redistribution and use in source and binary forms, with or       //
// without modification, are permitted provided that the following  //
// conditions are met:                                              //
//                                                                  //
// * Redistributions of source code must retain the above copyright //
//   notice, this list of conditions and the following disclaimer.  // 
//                                                                  //
// * Redistributions in binary form must reproduce the above        // 
//   copyright notice, this list of conditions and the following    // 
//   disclaimer in the documentation and/or other materials         // 
//   provided with the distribution.                                //
//                                                                  //
// * Neither the name of the University of Huelva nor the names of  //
//   its contributors may be used to endorse or promote products    //
//   derived from this software without specific prior written      // 
//   permission.                                                    //
//                                                                  //
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND           // 
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,      // 
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF         // 
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE         // 
// DISCLAIMED. IN NO EVENT SHALL THE COPRIGHT OWNER OR CONTRIBUTORS //
// BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,         // 
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED  //
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,    //
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND   // 
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT          //
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING   //
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF   //
// THE POSSIBILITY OF SUCH DAMAGE.                                  //
//------------------------------------------------------------------//

//------------------------------------------------------------------//
//                      Universidad de Huelva                       //
//          Departamento de Tecnologías de la Información           //
//   Área de Ciencias de la Computación e Inteligencia Artificial   //
//------------------------------------------------------------------//
//                     PROCESADORES DE LENGUAJE                     //
//------------------------------------------------------------------//
//                                                                  //
//          Compilador del lenguaje Tinto [Versión 0.1]             //
//                                                                  //
//------------------------------------------------------------------//


package tinto.parser;

import tinto.ast.Type;
import tinto.ast.struct.*;

/**
 * Clase que extrae la cabecera de una biblioteca de funciones
 * a partir de un fichero fuente ".tinto"
 */
public class TintoHeaderParser implements TintoHeaderParserConstants {

        //----------------------------------------------------------------//
        //                        Miembros privados                       //
        //----------------------------------------------------------------//

        /**
	 * Contador de errores
	 */
        private int errorCount;

        /**
	 * Mensaje de errores
	 */
        private String errorMsg;

        //----------------------------------------------------------------//
        //    Método de análisis de ficheros fuente en lenguaje Tinto     //
        //----------------------------------------------------------------//

        /**
	 * Analiza un fichero fuente de titno y extrae la cabecera de la biblioteca
	 */
        public Library parse(String libname) {
                try {
                        return CompilationUnit(libname);
                } catch(Exception e) {
                        return null;
                }
        }

        //----------------------------------------------------------------//
        //       Métodos relacionados con el tratamiento de errores       //
        //----------------------------------------------------------------//

        /**
	 * Obtiene el número de errores del análisis
	 * @return
	 */
        public int getErrorCount() {
                return this.errorCount;
        }

        /**
	 * Obtiene el mensaje de error del análisis
	 * @return
	 */
        public String getErrorMsg() {
                return this.errorMsg;
        }

        /**
	 * Almacena un error de análisis
	 * @param ex
	 */
        private void catchError(Exception ex) {
                ex.printStackTrace();
                this.errorCount++;
                this.errorMsg += ex.toString();
        }

        //----------------------------------------------------------------//
        //                Métodos de verificación semántica               //
        //----------------------------------------------------------------//

        /**
	 * Verifica que el nombre de la biblioteca corresponde al nombre del
	 * fichero ".tinto" 
	 */
        private void verifyLibraryName(Token tk, Library library) {
                if(!tk.image.equals(library.getName())){
                        int errorcode = SemanticException.LIBRARY_NAME_EXCEPTION;
                        catchError(new SemanticException(errorcode,tk));
                }
        }

        /**
	 * Verifica que un cierto método no haya sido definido previamente
	 */
        private void verifyDuplicatedMethod(Token tk, Method method, Library library) {
                int[] type = method.getArgumentTypes();
                Method dup = library.getMethod(tk.image,type);
                if(dup != null) {
                        int errorcode = SemanticException.DUPLICATED_METHOD_EXCEPTION;
                        catchError(new SemanticException(errorcode,tk));
                }
        }

        /**
	 * Verifica que el nombre de un argumento de un método no esté duplicado
	 */
        private void verifyDuplicatedArgument(Token tk, Method method) {
                Variable arg = method.getArgument(tk.image);
                if(arg != null) {
                        int errorcode = SemanticException.DUPLICATED_ARGUMENT_EXCEPTION;
                        catchError(new SemanticException(errorcode,tk));
                }
        }

/**************************************************************/
/*         EL ANÁLISIS DE LA CABECERA COMIENZA AQUÍ           */
/**************************************************************/

/**
 * Reconoce el contenido completo de un archivo ".tinto" y genera un objeto Library
 *
 * CompilationUnit -> (InportClause)* Library
 */
  final public Library CompilationUnit(String name) throws ParseException {
  Library library = new Library(name);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      ImportClause(library);
    }
    Library(library);
          {if (true) return library;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una claúsula de importación y la incluye en la biblioteca
 *
 * ImportClause -> <IMPORT>  <IDENTIFIER>  <SEMICOLON>
 */
  final public void ImportClause(Library library) throws ParseException {
  int[] lsync = { SEMICOLON };
  int[] rsync = { IMPORT, LIBRARY };
  Token tid;
    try {
      jj_consume_token(IMPORT);
      tid = jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMICOLON);
          library.addImportedLibrary(tid.image);
    } catch (Exception ex) {
                        catchError(ex); skipTo(lsync,rsync);
    }
  }

/**
 * Reconoce el cuerpo de una biblioteca
 *
 * Library -> <LIBRARY>  <IDENTIFIER> <LBRACE> ( Method )* <RBRACE>
 */
  final public void Library(Library library) throws ParseException {
  int[] lsync = { };
  int[] rsync = { };
  Token tid;
    try {
      jj_consume_token(LIBRARY);
      tid = jj_consume_token(IDENTIFIER);
                              verifyLibraryName(tid,library);
      jj_consume_token(LBRACE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case INT:
        case VOID:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        Method(library);
      }
      jj_consume_token(RBRACE);
    } catch (Exception ex) {
                        catchError(ex); skipTo(lsync,rsync);
    }
  }

/**
 * Reconoce un método de la biblioteca
 *
 * Method -> MethodType <IDENTIFIER>  ArgumentDecl MethodBody
 */
  final public void Method(Library library) throws ParseException {
  int type;
  Token tid;
  Method method;
    type = MethodType();
    tid = jj_consume_token(IDENTIFIER);
                                method = new Method(type, tid.image, library.getName() );
    ArgumentDecl(method);
                                verifyDuplicatedMethod(tid,method,library);
    MethodBody();
          library.addMethod(method);
  }

/**
 * Reconoce el tipo de dato que devuelve un método
 *
 * MethodType -> Type | <VOID>
 */
  final public int MethodType() throws ParseException {
  int type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case INT:
      type = Type();
                   {if (true) return type;}
      break;
    case VOID:
      jj_consume_token(VOID);
            {if (true) return Type.VOID_TYPE;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce el tipo de dato de una variable
 *
 * Type -> <INT> | <CHAR> | <BOOLEAN>
 */
  final public int Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
                          {if (true) return Type.INT_TYPE;}
      break;
    case CHAR:
      jj_consume_token(CHAR);
                  {if (true) return Type.CHAR_TYPE;}
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
                  {if (true) return Type.BOOLEAN_TYPE;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce la declaración de argumentos de un método
 *
 * ArgumentDecl -> <LPAREN>  (  Argument ( <COMMA>  Argument )* )?  <RPAREN>
 */
  final public void ArgumentDecl(Method method) throws ParseException {
  int[] lsync = { RPAREN };
  int[] rsync = { LBRACE };
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case INT:
        Argument(method);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          Argument(method);
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Exception ex) {
                         catchError(ex); skipTo(lsync,rsync);
    }
  }

/**
 * Reconoce la declaración de un argumento
 *
 * Argument -> Type <IDENTIFIER>
 */
  final public void Argument(Method method) throws ParseException {
  int[] lsync = { };
  int[] rsync = { COMMA, RPAREN };
  int type;
  Token tid;
    try {
      type = Type();
      tid = jj_consume_token(IDENTIFIER);
          verifyDuplicatedArgument(tid,method); method.addArgument(new Variable(type, tid.image) );
    } catch (Exception ex) {
                        catchError(ex); skipTo(lsync,rsync);
    }
  }

  void MethodBody() throws ParseException {
  Token tk = getNextToken();  // Consume el caracter "{"
  int level = 1;
  while(level != 0) {
    tk = getNextToken();
        if(tk.kind == EOF) break;
    else if(tk.kind == LBRACE) level ++;
    else if(tk.kind == RBRACE) level --;
   }
  }

  void skipTo(int[] left, int[] right) throws ParseException {
  Token prev = getToken(0);
  Token next = getToken(1);
  boolean flag = false;
  if(prev.kind == EOF || next.kind == EOF) flag = true;
  for(int i=0; i<left.length; i++) if(prev.kind == left[i]) flag = true;
  for(int i=0; i<right.length; i++) if(next.kind == right[i]) flag = true;

  while(!flag) {
    getNextToken();
    prev = getToken(0);
    next = getToken(1);
    if(prev.kind == EOF || next.kind == EOF) flag = true;
    for(int i=0; i<left.length; i++) if(prev.kind == left[i]) flag = true;
    for(int i=0; i<right.length; i++) if(next.kind == right[i]) flag = true;
  }
  }

  /** Generated Token Manager. */
  public TintoHeaderParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000,0x2100900,0x2100900,0x100900,0x0,0x100900,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x80,0x0,};
   }

  /** Constructor with InputStream. */
  public TintoHeaderParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TintoHeaderParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TintoHeaderParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public TintoHeaderParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TintoHeaderParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public TintoHeaderParser(TintoHeaderParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TintoHeaderParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[63];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
