/* Generated By:JavaCC: Do not edit this line. TintoParser.java */
//------------------------------------------------------------------//
//                        COPYRIGHT NOTICE                          //
//------------------------------------------------------------------//
// Copyright (c) 2008, Francisco José Moreno Velo                   //
// All rights reserved.                                             //
//                                                                  //
// Redistribution and use in source and binary forms, with or       //
// without modification, are permitted provided that the following  //
// conditions are met:                                              //
//                                                                  //
// * Redistributions of source code must retain the above copyright //
//   notice, this list of conditions and the following disclaimer.  // 
//                                                                  //
// * Redistributions in binary form must reproduce the above        // 
//   copyright notice, this list of conditions and the following    // 
//   disclaimer in the documentation and/or other materials         // 
//   provided with the distribution.                                //
//                                                                  //
// * Neither the name of the University of Huelva nor the names of  //
//   its contributors may be used to endorse or promote products    //
//   derived from this software without specific prior written      // 
//   permission.                                                    //
//                                                                  //
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND           // 
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,      // 
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF         // 
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE         // 
// DISCLAIMED. IN NO EVENT SHALL THE COPRIGHT OWNER OR CONTRIBUTORS //
// BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,         // 
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED  //
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,    //
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND   // 
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT          //
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING   //
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF   //
// THE POSSIBILITY OF SUCH DAMAGE.                                  //
//------------------------------------------------------------------//

//------------------------------------------------------------------//
//                      Universidad de Huelva                       //
//          Departamento de Tecnologías de la Información           //
//   Área de Ciencias de la Computación e Inteligencia Artificial   //
//------------------------------------------------------------------//
//                     PROCESADORES DE LENGUAJE                     //
//------------------------------------------------------------------//
//                                                                  //
//          Compilador del lenguaje Tinto [Versión 0.1]             //
//                                                                  //
//------------------------------------------------------------------//

package tinto.parser;

import tinto.ast.Type;
import tinto.ast.expression.*;
import tinto.ast.statement.*;
import tinto.ast.struct.*;
import java.util.Hashtable;

/**
 * Clase que añade el cuerpo a los métodos de una biblioteca a partir
 * de un fichero ".tinto" y de la cabecera de la biblioteca
 */
public class TintoParser implements TintoParserConstants {

        //----------------------------------------------------------------//
        //                        Miembros privados                       //
        //----------------------------------------------------------------//

        /**
	 * Contador de errores
	 */
        private int errorCount;

        /**
	 * Mensaje de errores
	 */
        private String errorMsg;

        /**
	 * Librerías importadas
	 */
        private Hashtable<String,Library> imported;

        //----------------------------------------------------------------//
        //                  Método de llamada al parser                   //
        //----------------------------------------------------------------//

        /**
	 * Analiza un fichero ".tinto" añadiendo la información del cuerpo de los métodos
	 */
        public boolean parse(Library library, Hashtable<String,Library> il) {
                this.imported = il;
                try {
                        CompilationUnit(library);
                        return true;
                } catch(Exception e) {
                        return false;
                }
        }

        //----------------------------------------------------------------//
        //       Métodos relacionados con el tratamiento de errores       //
        //----------------------------------------------------------------//

        /**
	 * Obtiene el número de errores del análisis
	 * @return
	 */
        public int getErrorCount() {
                return this.errorCount;
        }

        /**
	 * Obtiene el mensaje de error del análisis
	 * @return
	 */
        public String getErrorMsg() {
                return this.errorMsg;
        }

        /**
	 * Almacena un error de análisis
	 * @param ex
	 */
        private void catchError(Exception ex) {
                ex.printStackTrace();
                this.errorCount++;
                this.errorMsg += ex.toString();
        }

        //----------------------------------------------------------------//
        //       Métodos relacionados con las librerías importadas        //
        //----------------------------------------------------------------//

        /**
	 * Obtiene la referencia a una librería importada
	 */
        private Library getImportedLibrary(String libname) {
                return imported.get(libname);
        }

        //----------------------------------------------------------------//
        //       Métodos relacionados con las aciones semánticas          //
        //----------------------------------------------------------------//

        /**
	 * Acción semántica asociada al reconocimiento de una declaración de variable
	 */
        private void actionAddDeclaration(      BlockStatement block,
                                                                                Method method,
                                                                                Library library,
                                                                                int type,
                                                                                Token tid,
                                                                                Expression exp) {
                verifyDuplicatedVariable(tid, method);
                Variable var = new Variable(type, tid.image);
                method.addLocalVariable(var);
                if(exp != null) {
                        AssignStatement stm = new AssignStatement(var,exp);
                        block.addStatement(stm);
                }
        }

        /**
	 * Acción semántica que obtiene la instrucción asociada a una declaración
	 * de variables. Si no hay inicializaciones devuelve null. Si sólo hay una
	 * devuelve esa asignación. Si hay más de una devuelve el bloque de
	 * asignaciones.
	 */
        private Statement actionGetStatementFromBlock(BlockStatement block) {
                Statement[] list = block.getStatementList();
                if(list.length == 0) return null;
                if(list.length == 1) return list[0];
                return block;
        }

        /**
	 * Acción semántica asociada al reconocimiento de una instrucción de asignación
	 */
        private Statement actionAssignStatement(Token tk, Expression exp, Method method, Library library) {
                verifyUnknownVariable(tk,method);
                Variable var = method.getVariable(tk.image);
                verifyTypes(tk,var,exp);
                return new AssignStatement(var,exp);
        }

        /**
	 * Acción semántica asociada al reconocimiento de una llamada a un método
	 * de la misma biblioteca
	 */
        private Statement actionCallStatement(Token tk, CallParameters param, Method method, Library library) {
                verifyUnknownMethod(tk,param,library);
                Method called = library.getMethod(tk.image,param.getTypes());
                CallExpression exp = new CallExpression(called,param,library);
                return new CallStatement(exp);
        }

        /**
	 * Acción semántica asociada al reconocimiento de una llamada a un método
	 * de una biblioteca importada
	 */
        private Statement actionCallStatement( Token tid1, Token tid2, CallParameters param, Method method, Library library) {
                verifyUnknownLibrary(tid1);
                Library lib = getImportedLibrary(tid1.image);
                verifyUnknownMethod(tid2,param,lib);
                Method called = lib.getMethod(tid2.image,param.getTypes());
                CallExpression exp = new CallExpression(called,param,lib);
                return new CallStatement(exp);
        }

        /**
	 * Acción semántica que crea una expresión binaria que define un OR entre
	 * dos expresiones.
	 */
        private Expression actionOrExpression(Token tk,Expression exp1, Expression exp2) {
                verifyBooleanTypes(tk,exp1,exp2);
                int type = Type.BOOLEAN_TYPE;
                int op = BinaryExpression.OR;
                Expression exp = new BinaryExpression(type, op, exp1, exp2);
                return exp;
        }

        /**
	 * Acción semántica que crea una expresión binaria que define un AND entre
	 * dos expresiones.
	 */
        private Expression actionAndExpression(Token tk, Expression exp1, Expression exp2) {
                verifyBooleanTypes(tk,exp1,exp2);
                int type = Type.BOOLEAN_TYPE;
                int op = BinaryExpression.AND;
                Expression exp = new BinaryExpression(type, op, exp1, exp2);
                return exp;
        }

        /**
	 * Acción semántica que crea una expresión binaria que define un OR a nivel de bits entre
	 * dos expresiones.
	 */
        private Expression actionBitOrExpression(Token tk,Expression exp1, Expression exp2) {
                verifyIntegerTypes(tk,exp1,exp2);
                int type = Type.INT_TYPE;
                int op = BinaryExpression.BIT_OR;
                Expression exp = new BinaryExpression(type, op, exp1, exp2);
                return exp;
        }

        /**
	 * Acción semántica que crea una expresión binaria que define un XOR a nivel de bits entre
	 * dos expresiones.
	 */
        private Expression actionXorExpression(Token tk,Expression exp1, Expression exp2) {
                verifyIntegerTypes(tk,exp1,exp2);
                int type = Type.INT_TYPE;
                int op = BinaryExpression.XOR;
                Expression exp = new BinaryExpression(type, op, exp1, exp2);
                return exp;
        }

        /**
	 * Acción semántica que crea una expresión binaria que define un AND a nivel de bits entre
	 * dos expresiones.
	 */
        private Expression actionBitAndExpression(Token tk, Expression exp1, Expression exp2) {
                verifyIntegerTypes(tk,exp1,exp2);
                int type = Type.INT_TYPE;
                int op = BinaryExpression.BIT_AND;
                Expression exp = new BinaryExpression(type, op, exp1, exp2);
                return exp;
        }

        /**
	 * Acción semántica que crea una expresión binaria que define una relación entre
	 * dos expresiones.
	 */
        private Expression actionRelExpression(Token tk, int op, Expression exp1, Expression exp2) {
                verifyRelationTypes(tk,op,exp1,exp2);
                int type = Type.BOOLEAN_TYPE;
                Expression exp = new BinaryExpression(type, op, exp1, exp2);
                return exp;
        }

        /**
	 * Acción semántica que crea una expresión binaria que define una relación entre
	 * dos expresiones.
	 */
        private Expression actionShiftExpression(Token tk, int op, Expression exp1, Expression exp2) {
                verifyIntegerTypes(tk,exp1,exp2);
                int type = Type.INT_TYPE;
                Expression exp = new BinaryExpression(type, op, exp1, exp2);
                return exp;
        }

        /**
	 * Acción semántica que crea una expresión unaria sobre otra expresión.
	 */
        private Expression actionUnaryExpression(Token tk, int op, Expression exp) {
                switch(op) {
                        case UnaryExpression.NONE:
                                return exp;
                        case UnaryExpression.NOT:
                                verifyBooleanType(tk,exp);
                                return new UnaryExpression(Type.BOOLEAN_TYPE,op,exp);
                        case UnaryExpression.MINUS:
                                verifyIntegerType(tk,exp);
                                return new UnaryExpression(Type.INT_TYPE,op,exp);
                        case UnaryExpression.PLUS:
                                verifyIntegerType(tk,exp);
                                return exp;
                        case UnaryExpression.TILDE:
                                verifyIntegerType(tk,exp);
                                return new UnaryExpression(Type.INT_TYPE,op,exp);
                }
                return exp;
        }

        /**
	 * Acción semántica que crea una expresión binaria en forma de suma o resta
	 */
        private Expression actionSumExpression(Token tk,int op, Expression exp1, Expression exp2) {
                verifyIntegerTypes(tk,exp1,exp2);
                int type = Type.INT_TYPE;
                Expression exp = new BinaryExpression(type, op, exp1, exp2);
                return exp;
        }

        /**
	 * Acción semántica que crea una expresión binaria en forma de producto, división o módulo
	 */
        private Expression actionProdExpression(Token tk,int op, Expression exp1, Expression exp2) {
                verifyIntegerTypes(tk,exp1,exp2);
                int type = Type.INT_TYPE;
                Expression exp = new BinaryExpression(type, op, exp1, exp2);
                return exp;
        }

        /**
	 * Acción semántica que crea una expresión de referencia a una variable o a un método
	 */
        private Expression actionReferenceExpression(   Method method,
                                                                                Library library,
                                                                                Token tid1,
                                                                                Token tid2,
                                                                                CallParameters param) {
                if(param == null) {
                        verifyUnknownVariable(tid1,method);
                        Variable var = method.getVariable(tid1.image);
                        return new VariableExpression(var);
                } else if(tid2 == null) {
                        verifyUnknownMethod(tid1,param,library);
                        Method called = library.getMethod(tid1.image,param.getTypes());
                        return new CallExpression(called,param,library);
                } else {
                        verifyUnknownLibrary(tid1);
                        Library lib = getImportedLibrary(tid1.image);
                        verifyUnknownMethod(tid2,param,lib);
                        Method called = lib.getMethod(tid2.image,param.getTypes());
                        return new CallExpression(called,param,lib);
                }
        }

        /**
	 * Acción semántica que crea un literal de tipo entero
	 */
        private Expression actionIntegerLiteral(Token tk) {
                verifyIntegerValue(tk);
                try { return new IntegerLiteralExpression(tk.image); }
                catch(Exception e) { return new IntegerLiteralExpression(0); }
        }

        //----------------------------------------------------------------//
        //                Métodos de verificación semántica               //
        //----------------------------------------------------------------//

        /**
	 * Verifica que el código de un método alcanza siempre un return
	 */
        private void verifyUnfinishedMethod(Token tk, BlockStatement body, Method method) {
                if(method.getType() != Type.VOID_TYPE && !body.returns() ){
                        int errorcode = SemanticException.UNFINISHED_METHOD;
                        catchError(new SemanticException(errorcode,tk));
                }
        }

        /**
	 * Verifica que la sentencia a añadir a un bloque es alcanzable
	 */
        private void verifyUnreachableCode(Statement stm, BlockStatement block) {
                if(stm != null && block.isBroken() ) {
                        int errorcode = SemanticException.UNREACHABLE_CODE;
                        catchError(new SemanticException(errorcode,getToken(0)));
                }
        }

        /**
	 * Verifica que una variable no esté duplicada
	 */
        private void verifyDuplicatedVariable(Token tk, Method method) {
                if(method.existsInContext(tk.image)) {
                        int errorcode = SemanticException.DUPLICATED_VARIABLE_EXCEPTION;
                        catchError(new SemanticException(errorcode,tk));
                }
        }

        /**
	 * Verifica que una clausula case o default no esté duplicada
	 */
        private void verifyDuplicatedCase(Token tk, DefaultCaseStatement onecase, SwitchStatement stm) {
                if(onecase.getValue()==null) {
                        if (stm.haveDefault()) {
                          int errorcode = SemanticException.DUPLICATED_CASE_EXCEPTION;
                          catchError(new SemanticException(errorcode,tk));
                        }
                } else if (stm.contains(onecase)) {
                  int errorcode = SemanticException.DUPLICATED_CASE_EXCEPTION;
              catchError(new SemanticException(errorcode,tk));
                }
        }

        /**
	 * Verifica que la condición de una intrucción if, while, do while o for sea una
	 * expresión booleana.
	 */
        private void verifyBooleanExpression(Token tk, Expression expr) {
                if(expr.getType() != Type.BOOLEAN_TYPE) {
                        int errorcode = SemanticException.INVALID_CONDITION_EXCEPTION;
                        catchError(new SemanticException(errorcode,tk));
                }
        }

        /**
	 * Verifica que la condición de una intrucción if, while, do while o for sea una
	 * expresión booleana.
	 */
        private void verifyIntegerExpression(Token tk, Expression expr) {
                if(expr.getType() != Type.INT_TYPE) {
                        int errorcode = SemanticException.INVALID_CONDITION_EXCEPTION;
                        catchError(new SemanticException(errorcode,tk));
                }
        }

        /**
	 * Verifica que una instrucción return devuelve un tipo de dato correcto
	 */
        private void verifyReturnType(Token tk, Expression expr, Method method) {
                if(expr == null && method.getType() != Type.VOID_TYPE) {
                        int errorcode = SemanticException.INVALID_RETURN_EXCEPTION;
                        catchError(new SemanticException(errorcode,tk));
                }
                if(expr != null && method.getType() != expr.getType()) {
                        int errorcode = SemanticException.INVALID_RETURN_EXCEPTION;
                        catchError(new SemanticException(errorcode,tk));
                }
        }

        /**
	 * Verifica la existencia una variable de una instrucción de asignación
	 */
        private void verifyUnknownVariable(Token tk, Method method) {
                if(method.getVariable(tk.image) == null) {
                        int errorcode = SemanticException.UNKNOWN_VARIABLE_EXCEPTION;
                        catchError(new SemanticException(errorcode,tk));
                }
        }

        /** 
	 * Verifica que los tipos de datos en una instrucción de asignación son correctos
	 */
        private void verifyTypes(Token tk, Variable var, Expression expr) {
                if(var.getType() != expr.getType()) {
                        int errorcode = SemanticException.TYPE_MISMATCH_EXCEPTION;
                        catchError(new SemanticException(errorcode,tk));
                }
        }

        /**
	 * Verifica la existencia un método en una cierta biblioteca
	 */
        private void verifyUnknownMethod(Token tk, CallParameters param, Library library) {
                if(library == null) return;
                if(library.getMethod(tk.image,param.getTypes()) == null) {
                        int errorcode = SemanticException.UNKNOWN_METHOD_EXCEPTION;
                        catchError(new SemanticException(errorcode,tk));
                }
        }

        /**
	 * Verifica que una biblioteca ha sido importada
	 */
        private void verifyUnknownLibrary(Token tk) {
                if(getImportedLibrary(tk.image) == null) {
                        int errorcode = SemanticException.UNKNOWN_LIBRARY_EXCEPTION;
                        catchError(new SemanticException(errorcode,tk));
                }
        }

        /**
	 * Verifica que los dos operandos de una expresión lógica (AND, OR) sean booleanos
	 */
        private void verifyBooleanTypes(Token tk, Expression exp1, Expression exp2) {
                if(exp1.getType() != Type.BOOLEAN_TYPE || exp2.getType() != Type.BOOLEAN_TYPE) {
                        int errorcode = SemanticException.TYPE_MISMATCH_EXCEPTION;
                        catchError(new SemanticException(errorcode,tk));
                }
        }

        /**
	 * Verifica que los tipos de los dos operandos de una relación sean correctos
	 */
        private void verifyRelationTypes(Token tk, int relop, Expression exp1, Expression exp2) {
                if(exp1.getType() != exp2.getType()) {
                        int errorcode = SemanticException.TYPE_MISMATCH_EXCEPTION;
                        catchError(new SemanticException(errorcode,tk));
                }
                if(relop != BinaryExpression.EQ && relop != BinaryExpression.NEQ &&
                   exp1.getType() == Type.BOOLEAN_TYPE) {
                        int errorcode = SemanticException.TYPE_MISMATCH_EXCEPTION;
                        catchError(new SemanticException(errorcode,tk));
                }
        }

        /**
	 * Verifica que una expresión sea de tipo boolean
	 */
        private void verifyBooleanType(Token tk, Expression expr) {
                if(expr.getType() != Type.BOOLEAN_TYPE) {
                        int errorcode = SemanticException.TYPE_MISMATCH_EXCEPTION;
                        catchError(new SemanticException(errorcode,tk));
                }
        }

        /**
	 * Verifica que una expresión sea de tipo entero
	 */
        private void verifyIntegerType(Token tk, Expression expr) {
                if(expr.getType() != Type.INT_TYPE) {
                        int errorcode = SemanticException.TYPE_MISMATCH_EXCEPTION;
                        catchError(new SemanticException(errorcode,tk));
                }
        }

        /**
	 * Verifica que los dos operandos de una operación sean de tipo entero
	 */
        private void verifyIntegerTypes(Token tk, Expression exp1, Expression exp2) {
                if(exp1.getType() != Type.INT_TYPE || exp2.getType() != Type.INT_TYPE ) {
                        int errorcode = SemanticException.TYPE_MISMATCH_EXCEPTION;
                        catchError(new SemanticException(errorcode,tk));
                }
        }

        /**
	 * Verifica que el valor de un literal entero sea correcto
	 */
        private void verifyIntegerValue(Token tk) {
                try { Integer.parseInt(tk.image); }
                catch(Exception e) {
                        int errorcode = SemanticException.NUMBER_FORMAT_EXCEPTION;
                        catchError(new SemanticException(errorcode,tk));
                }
        }

/**************************************************************/
/*         EL ANÁLISIS DE LA CABECERA COMIENZA AQUÍ           */
/**************************************************************/

/**
 * Reconoce el contenido completo de un archivo ".tinto"
 *
 * CompilationUnit -> (InportClause)* Library
 */
  final public void CompilationUnit(Library library) throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      ImportClause();
    }
    Library(library);
  }

/**
 * Reconoce una claúsula de importación y la incluye en la biblioteca
 *
 * ImportClause -> <IMPORT>  <IDENTIFIER>  <SEMICOLON>
 */
  final public void ImportClause() throws ParseException {
  int[] lsync = { SEMICOLON };
  int[] rsync = { IMPORT, LIBRARY };
    try {
      jj_consume_token(IMPORT);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMICOLON);
    } catch (Exception ex) {
                        catchError(ex); skipTo(lsync,rsync);
    }
  }

/**
 * Reconoce el cuerpo de una biblioteca
 *
 * Library -> <LIBRARY>  <IDENTIFIER> <LBRACE> ( Method )* <RBRACE>
 */
  final public void Library(Library library) throws ParseException {
  int[] lsync = { };
  int[] rsync = { };
    try {
      jj_consume_token(LIBRARY);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LBRACE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case INT:
        case VOID:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        Method(library);
      }
      jj_consume_token(RBRACE);
    } catch (Exception ex) {
                        catchError(ex); skipTo(lsync,rsync);
    }
  }

/**
 * Reconoce un método de la biblioteca
 *
 * Method -> MethodType <IDENTIFIER>  ArgumentDecl MethodBody
 */
  final public void Method(Library library) throws ParseException {
  Token tid;
  int[] arg;
  Method method;
    MethodType();
    tid = jj_consume_token(IDENTIFIER);
    arg = ArgumentDecl();
          method = library.getMethod(tid.image, arg);
    MethodBody(method,library);
  }

/**
 * Reconoce el tipo de dato que devuelve un método
 *
 * MethodType -> Type | <VOID>
 */
  final public void MethodType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case INT:
      Type();
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * Reconoce el tipo de dato de una variable
 *
 * Type -> <INT> | <CHAR> | <BOOLEAN>
 */
  final public int Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
                          {if (true) return Type.INT_TYPE;}
      break;
    case CHAR:
      jj_consume_token(CHAR);
                  {if (true) return Type.CHAR_TYPE;}
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
                  {if (true) return Type.BOOLEAN_TYPE;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce la declaración de argumentos de un método
 *
 * ArgumentDecl -> <LPAREN>  (  Argument ( <COMMA>  Argument )* )?  <RPAREN>
 */
  final public int[] ArgumentDecl() throws ParseException {
  int[] lsync = { RPAREN };
  int[] rsync = { LBRACE };
  int[] arg = new int[0];
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case INT:
        arg = Argument(arg);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          arg = Argument(arg);
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Exception ex) {
                         catchError(ex); skipTo(lsync,rsync);
    }
          {if (true) return arg;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce la declaración de un argumento
 *
 * Argument -> Type <IDENTIFIER>
 */
  final public int[] Argument(int[] list) throws ParseException {
  int[] lsync = { };
  int[] rsync = { COMMA, RPAREN };
  int type = Type.MISMATCH_TYPE;
  int[] nl = new int[list.length+1];
  System.arraycopy(list,0,nl,0,list.length);
    try {
      type = Type();
      jj_consume_token(IDENTIFIER);
    } catch (Exception ex) {
                        catchError(ex); skipTo(lsync,rsync);
    }
          nl[list.length] = type; {if (true) return nl;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce el cuerpo de un método
 *
 * MethodBody -> <LBRACE>  (  Stm() )*  <RBRACE>
 */
  final public void MethodBody(Method method, Library library) throws ParseException {
  BlockStatement block = new BlockStatement();
  Statement stm;
  Token tk;
    jj_consume_token(LBRACE);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BREAK:
      case CHAR:
      case CONTINUE:
      case DO:
      case FOR:
      case IF:
      case INT:
      case RETURN:
      case SWITCH:
      case WHILE:
      case IDENTIFIER:
      case LBRACE:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      stm = TryStm(method,library);
                                     verifyUnreachableCode(stm,block); block.addStatement(stm);
    }
    tk = jj_consume_token(RBRACE);
          verifyUnfinishedMethod(tk,block,method); method.setBody(block);
  }

/**
 * Reconoce una sentencia del lenguaje y la añade al bloque de sentencias activo
 */
  final public Statement TryStm(Method method, Library library) throws ParseException {
  int[] lsync = { SEMICOLON, LBRACE };
  int[] rsync = { };
  Statement stm;
    try {
      stm = Stm(method, library);
          {if (true) return stm;}
    } catch (Exception ex) {
                        catchError(ex); skipTo(lsync,rsync);
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una sentencia del lenguaje
 *
 * Stm -> Decl | IdStm | IfStm | WhileStm | ReturnStm | NoStm | BlockStm
 */
  final public Statement Stm(Method method, Library library) throws ParseException {
        Statement stm = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case INT:
      stm = Decl(method, library);
      break;
    case IDENTIFIER:
      stm = IdStm(method, library);
      break;
    case IF:
      stm = IfStm(method, library);
      break;
    case SWITCH:
      stm = SwitchStm(method, library);
      break;
    case WHILE:
      stm = WhileStm(method, library);
      break;
    case DO:
      stm = DoWhileStm(method, library);
      break;
    case FOR:
      stm = ForStm(method, library);
      break;
    case RETURN:
      stm = ReturnStm(method, library);
      break;
    case BREAK:
      stm = BreakStm(method, library);
      break;
    case CONTINUE:
      stm = ContinueStm(method, library);
      break;
    case SEMICOLON:
      stm = NoStm(method, library);
      break;
    case LBRACE:
      stm = BlockStm(method, library);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return stm;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce la declaración de una variable (o una lista de variables)
 *
 * Decl -> Type <IDENTIFIER>  Assignement  ( <COMMA> <IDENTIFIER> Assignement )*  <SEMICOLON>
 */
  final public Statement Decl(Method method, Library library) throws ParseException {
        int type;
        Token tid;
        Expression exp;
        BlockStatement block = new BlockStatement();
    type = Type();
    tid = jj_consume_token(IDENTIFIER);
    exp = Assignement(method, library);
         actionAddDeclaration(block, method, library, type, tid, exp);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      tid = jj_consume_token(IDENTIFIER);
      exp = Assignement(method, library);
        actionAddDeclaration(block, method, library, type, tid, exp);
    }
    jj_consume_token(SEMICOLON);
     {if (true) return actionGetStatementFromBlock(block);}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una asignación opcional y devuelve la referencia a la parte derecha
 *
 * Assignament -> ( <ASSIGN> Expr )?
 */
  final public Expression Assignement(Method method, Library library) throws ParseException {
  Expression exp = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      exp = Expr(method,library);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
                  {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una instrucción "if".
 *
 * IfStm -> <IF> <LPAREN> Expr <RPAREN> Stm  ( <ELSE> Stm )?
 */
  final public Statement IfStm(Method method, Library library) throws ParseException {
        Token tk;
        Expression cond;
        Statement then;
        Statement otherwise = null;
    jj_consume_token(IF);
    tk = jj_consume_token(LPAREN);
    cond = Expr(method,library);
    jj_consume_token(RPAREN);
    then = TryStm(method,library);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      otherwise = TryStm(method,library);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
                  verifyBooleanExpression(tk,cond); {if (true) return new IfStatement(cond,then,otherwise);}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una instrucción "switch".
 *
 * SwitchStm -> <SWITCH> <LPAREN> Expr <RPAREN> <LBRACE> ( CaseStm | DefaultStm )* <RBRACE>
 */
  final public Statement SwitchStm(Method method, Library library) throws ParseException {
        Token tk;
        Expression exp;
        SwitchStatement stm;
        DefaultCaseStatement incase;
    jj_consume_token(SWITCH);
    tk = jj_consume_token(LPAREN);
    exp = Expr(method,library);
                                     verifyIntegerType(tk, exp); stm = new SwitchStatement(exp);
    jj_consume_token(RPAREN);
    tk = jj_consume_token(LBRACE);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case OTHERCASE:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        incase = CaseStm(method, library);
                                              verifyDuplicatedCase(tk,incase,stm); stm.addCase(incase);
        break;
      case OTHERCASE:
        incase = DefaultStm(method,library);
                                                 verifyDuplicatedCase(tk,incase,stm); stm.addDefault(incase);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RBRACE);
                  {if (true) return stm;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una seccion "case" de una instruccion "switch".
 *
 * CaseStm -> <CASE> <INTEGER_LITERAL> <COLON> (Stm)* 
 */
  final public DefaultCaseStatement CaseStm(Method method, Library library) throws ParseException {
        Token tk;
        BlockStatement block = new BlockStatement();
        Statement stm;
    jj_consume_token(CASE);
    tk = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(COLON);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BREAK:
      case CHAR:
      case CONTINUE:
      case DO:
      case FOR:
      case IF:
      case INT:
      case RETURN:
      case SWITCH:
      case WHILE:
      case IDENTIFIER:
      case LBRACE:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_7;
      }
      stm = TryStm(method,library);
                                                                       verifyUnreachableCode(stm,block); block.addStatement(stm);
    }
                  {if (true) return new DefaultCaseStatement(new IntegerLiteralExpression(tk.image),block);}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una seccion "default" de una instruccion "switch".
 *
 * DefaultStm -> <DEFAULT> <COLON> (Stm)* 
 */
  final public DefaultCaseStatement DefaultStm(Method method, Library library) throws ParseException {
        Token tk;
        Statement stm;
        BlockStatement block = new BlockStatement();
    jj_consume_token(OTHERCASE);
    tk = jj_consume_token(COLON);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BREAK:
      case CHAR:
      case CONTINUE:
      case DO:
      case FOR:
      case IF:
      case INT:
      case RETURN:
      case SWITCH:
      case WHILE:
      case IDENTIFIER:
      case LBRACE:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_8;
      }
      stm = TryStm(method,library);
                                                                verifyUnreachableCode(stm,block); block.addStatement(stm);
    }
                  {if (true) return new DefaultCaseStatement(null,block);}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una instrucción "while".
 *
 * WhileStm -> <WHILE> <LPAREN> Expr <RPAREN> Stm
 */
  final public Statement WhileStm(Method method, Library library) throws ParseException {
        Token tk;
        Expression cond;
        Statement body;
    jj_consume_token(WHILE);
    tk = jj_consume_token(LPAREN);
    cond = Expr(method,library);
    jj_consume_token(RPAREN);
    body = TryStm(method,library);
                  verifyBooleanExpression(tk,cond); {if (true) return new WhileStatement(cond,body);}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una instrucción "do while".
 *
 * DoWhileStm -> <DO> Stm <WHILE> <LPAREN> Expr <RPAREN> <SEMICOLON>
 */
  final public Statement DoWhileStm(Method method, Library library) throws ParseException {
        Token tk;
        Expression cond;
        Statement body;
    jj_consume_token(DO);
    body = TryStm(method,library);
    jj_consume_token(WHILE);
    tk = jj_consume_token(LPAREN);
    cond = Expr(method,library);
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
                  verifyBooleanExpression(tk,cond); {if (true) return new DoWhileStatement(cond,body);}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una instrucción "for".
 *
 * ForStm -> <FOR> <LPAREN> (ForIni)? <SEMICOLON> (Expr)? <SEMICOLON> (ForInc)? <RPAREN> Stm
 */
  final public Statement ForStm(Method method, Library library) throws ParseException {
        Token tk;
        Expression cond = new BooleanLiteralExpression("true");
        Statement body;
        Statement inc = null;
        Statement ini = null;
    jj_consume_token(FOR);
                method.createContext();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case INT:
    case IDENTIFIER:
      ini = ForIni(method, library);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    tk = jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case INTEGER_LITERAL:
    case CHAR_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case NOT:
    case PLUS:
    case MINUS:
    case TILDE:
      cond = Expr(method,library);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      inc = ForInc(method, library);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    body = TryStm(method,library);
                  verifyBooleanExpression(tk,cond); method.deleteContext(); {if (true) return new ForStatement(ini,cond,inc,body);}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce la inicializacion de la instruccion "for".
 * 
 * ForIni -> Type <IDENTIFIER>  Assignement  ( <COMMA> <IDENTIFIER> Assignement )*
 *			|  <ID> ( Assignement | MethodCall | <DOT>  <ID>  MethodCall ) ( <COMMA>  <ID> ( Assignement | MethodCall | <DOT>  <ID>  MethodCall ) )*
 */
  final public Statement ForIni(Method method, Library library) throws ParseException {
        int type;
        Token tid1, tid2;
        Expression exp;
        BlockStatement block = new BlockStatement();
        CallParameters call;
        Statement stm;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case INT:
      type = Type();
      tid1 = jj_consume_token(IDENTIFIER);
      exp = Assignement(method, library);
         actionAddDeclaration(block, method, library, type, tid1, exp);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        tid1 = jj_consume_token(IDENTIFIER);
        exp = Assignement(method, library);
                  actionAddDeclaration(block, method, library, type, tid1, exp);
      }
                          {if (true) return actionGetStatementFromBlock(block);}
      break;
    case IDENTIFIER:
      tid1 = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        exp = Expr(method,library);
                                                          stm = actionAssignStatement(tid1,exp,method,library);
        break;
      case LPAREN:
        call = MethodCall(method,library);
                                                                  stm = actionCallStatement(tid1,call,method,library);
        break;
      case DOT:
        jj_consume_token(DOT);
        tid2 = jj_consume_token(IDENTIFIER);
        call = MethodCall(method,library);
                                                                                          stm = actionCallStatement(tid1,tid2,call,method,library);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                    block.addStatement(stm);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        tid1 = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          exp = Expr(method,library);
                                                          stm = actionAssignStatement(tid1,exp,method,library);
          break;
        case LPAREN:
          call = MethodCall(method,library);
                                                                  stm = actionCallStatement(tid1,call,method,library);
          break;
        case DOT:
          jj_consume_token(DOT);
          tid2 = jj_consume_token(IDENTIFIER);
          call = MethodCall(method,library);
                                                                                          stm = actionCallStatement(tid1,tid2,call,method,library);
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                      block.addStatement(stm);
      }
                          {if (true) return actionGetStatementFromBlock(block);}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce el incremento de la instruccion "for".
 *
 * ForInc -> <ID> ( Assignement | MethodCall | <DOT>  <ID>  MethodCall ) ( <COMMA>  <ID> ( Assignement | MethodCall | <DOT>  <ID>  MethodCall ) )*
 */
  final public Statement ForInc(Method method, Library library) throws ParseException {
        Token tid1, tid2;
        Expression exp;
        BlockStatement block = new BlockStatement();
        CallParameters call;
        Statement stm;
    tid1 = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      exp = Expr(method,library);
                                                  stm = actionAssignStatement(tid1,exp,method,library);
      break;
    case LPAREN:
      call = MethodCall(method,library);
                                                          stm = actionCallStatement(tid1,call,method,library);
      break;
    case DOT:
      jj_consume_token(DOT);
      tid2 = jj_consume_token(IDENTIFIER);
      call = MethodCall(method,library);
                                                                                          stm = actionCallStatement(tid1,tid2,call,method,library);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            block.addStatement(stm);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      tid1 = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        exp = Expr(method,library);
                                                          stm = actionAssignStatement(tid1,exp,method,library);
        break;
      case LPAREN:
        call = MethodCall(method,library);
                                                                  stm = actionCallStatement(tid1,call,method,library);
        break;
      case DOT:
        jj_consume_token(DOT);
        tid2 = jj_consume_token(IDENTIFIER);
        call = MethodCall(method,library);
                                                                                          stm = actionCallStatement(tid1,tid2,call,method,library);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                    block.addStatement(stm);
    }
                  {if (true) return actionGetStatementFromBlock(block);}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una instrucción "return".
 *
 * ReturnStm -> <RETURN> ( Expr )? <SEMICOLON>
 */
  final public Statement ReturnStm(Method method, Library library) throws ParseException {
        Token tk;
        Expression exp = null;
    tk = jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case INTEGER_LITERAL:
    case CHAR_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case NOT:
    case PLUS:
    case MINUS:
    case TILDE:
      exp = Expr(method,library);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                  verifyReturnType(tk,exp,method); {if (true) return new ReturnStatement(exp);}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una instrucción "break".
 *
 * BreakStm -> <BREAK> <SEMICOLON>
 */
  final public Statement BreakStm(Method method, Library library) throws ParseException {
    jj_consume_token(BREAK);
    jj_consume_token(SEMICOLON);
                  {if (true) return new BreakStatement();}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una instrucción "continue".
 *
 * ContinueStm -> <CONTINUE> <SEMICOLON>
 */
  final public Statement ContinueStm(Method method, Library library) throws ParseException {
    jj_consume_token(CONTINUE);
    jj_consume_token(SEMICOLON);
                  {if (true) return new ContinueStatement();}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una instrucción vacía.
 *
 * NoStm -> <SEMICOLON>
 */
  final public Statement NoStm(Method method, Library library) throws ParseException {
    jj_consume_token(SEMICOLON);
    {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una instrucción que comienza por "id"
 *
 * IdStm -> <ID> ( Assignement | MethodCall | <DOT>  <ID>  MethodCall )  <SEMICOLON>
 */
  final public Statement IdStm(Method method, Library library) throws ParseException {
        Token tid1, tid2;
        Expression exp;
        CallParameters call;
        Statement stm;
    tid1 = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      exp = Expr(method,library);
                                                  stm = actionAssignStatement(tid1,exp,method,library);
      break;
    case LPAREN:
      call = MethodCall(method,library);
                                                  stm = actionCallStatement(tid1,call,method,library);
      break;
    case DOT:
      jj_consume_token(DOT);
      tid2 = jj_consume_token(IDENTIFIER);
      call = MethodCall(method,library);
                                                                                          stm = actionCallStatement(tid1,tid2,call,method,library);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
          {if (true) return stm;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce un bloque de instrucciones entre llaves.
 *
 * BlockStm -> <LBRACE> ( Stm )* <RBRACE>
 */
  final public Statement BlockStm(Method method, Library library) throws ParseException {
        BlockStatement block = new BlockStatement();
        Statement stm;
          method.createContext();
    jj_consume_token(LBRACE);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BREAK:
      case CHAR:
      case CONTINUE:
      case DO:
      case FOR:
      case IF:
      case INT:
      case RETURN:
      case SWITCH:
      case WHILE:
      case IDENTIFIER:
      case LBRACE:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_12;
      }
      stm = TryStm(method,library);
                                  verifyUnreachableCode(stm,block); block.addStatement(stm);
    }
    jj_consume_token(RBRACE);
          method.deleteContext(); {if (true) return block;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************/
/*       EL ANÁLISIS DE LAS EXPRESIONES COMIENZA AQUÍ         */
/**************************************************************/

/**
 * Analiza una expresión genérica. Puesto que el operador de menor prioridad
 * de los incluidos en Tinto es la disjunción (OR), un expresión se define
 * como una lista de disjunciones.
 *
 * Expr -> AndExpr ( <OR> AndExpr )*
 */
  final public Expression Expr(Method method, Library library) throws ParseException {
  int[] lsync = { };
  int[] rsync = { SEMICOLON, COMMA, RPAREN };
  Expression exp1 = null, exp2;
  Token tk;
    try {
      exp1 = AndExpr(method,library);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_13;
        }
        tk = jj_consume_token(OR);
        exp2 = AndExpr(method,library);
                          exp1 = actionOrExpression(tk, exp1,exp2);
      }
    } catch (Exception ex) {
                        catchError(ex); skipTo(lsync,rsync);
    }
          {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

/**
 * Analiza una expresión conjuntiva, es decir, formada por una lista de
 * conjunciones (operaciones AND).
 *
 * AndExpr -> BitOrExpr ( <AND> BitOrExpr )*
 */
  final public Expression AndExpr(Method method, Library library) throws ParseException {
  int[] lsync = { };
  int[] rsync = { SEMICOLON, COMMA, RPAREN, OR };
  Expression exp1 = null, exp2;
  Token tk;
    try {
      exp1 = BitOrExpr(method,library);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_14;
        }
        tk = jj_consume_token(AND);
        exp2 = BitOrExpr(method,library);
                          exp1 = actionAndExpression(tk,exp1,exp2);
      }
    } catch (Exception ex) {
                        catchError(ex); skipTo(lsync,rsync);
    }
          {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

/**
 * Analiza una expresión disjuntiva inclusiva a nivel de bit, es decir, formada por una lista de
 * disjunciones inclusivas a nivel de bit (operaciones |).
 *
 * BitOrExpr -> XorExpr ( <BIT_OR> XorExpr )*
 */
  final public Expression BitOrExpr(Method method, Library library) throws ParseException {
  int[] lsync = { };
  int[] rsync = { SEMICOLON, COMMA, RPAREN, OR, AND };
  Expression exp1 = null, exp2;
  Token tk;
    try {
      exp1 = XorExpr(method,library);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BIT_OR:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_15;
        }
        tk = jj_consume_token(BIT_OR);
        exp2 = XorExpr(method,library);
                          exp1 = actionBitOrExpression(tk,exp1,exp2);
      }
    } catch (Exception ex) {
                        catchError(ex); skipTo(lsync,rsync);
    }
          {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

/**
 * Analiza una expresión disjuntiva exclusiva a nivel de bit, es decir, formada por una lista de
 * disjunciones exclusivas a nivel de bit (operaciones ^).
 *
 * XorExpr -> BitAndExpr ( <XOR> BitAndExpr )*
 */
  final public Expression XorExpr(Method method, Library library) throws ParseException {
  int[] lsync = { };
  int[] rsync = { SEMICOLON, COMMA, RPAREN, OR, AND, BIT_OR };
  Expression exp1 = null, exp2;
  Token tk;
    try {
      exp1 = BitAndExpr(method,library);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case XOR:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_16;
        }
        tk = jj_consume_token(XOR);
        exp2 = BitAndExpr(method,library);
                          exp1 = actionXorExpression(tk,exp1,exp2);
      }
    } catch (Exception ex) {
                        catchError(ex); skipTo(lsync,rsync);
    }
          {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

/**
 * Analiza una expresión conjuntiva a nivel de bit, es decir, formada por una lista de
 * conjunciones a nivel de bit (operaciones &).
 *
 * BitAndExpr -> RelExpr ( <BIT_AND> RelExpr )*
 */
  final public Expression BitAndExpr(Method method, Library library) throws ParseException {
  int[] lsync = { };
  int[] rsync = { SEMICOLON, COMMA, RPAREN, OR, AND, BIT_OR, XOR };
  Expression exp1 = null, exp2;
  Token tk;
    try {
      exp1 = RelExpr(method,library);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BIT_AND:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_17;
        }
        tk = jj_consume_token(BIT_AND);
        exp2 = RelExpr(method,library);
                          exp1 = actionBitAndExpression(tk,exp1,exp2);
      }
    } catch (Exception ex) {
                        catchError(ex); skipTo(lsync,rsync);
    }
          {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

/**
 * Analiza una expresión relacional, es decir, una comparación entre dos
 * expresiones.
 *
 * RelExpr -> ShiftExpr ( Relop  ShiftExpr )?
 */
  final public Expression RelExpr(Method method, Library library) throws ParseException {
  int[] lsync = { };
  int[] rsync = { SEMICOLON, COMMA, RPAREN, OR, AND, BIT_OR, XOR, BIT_AND};
  Expression exp1 = null, exp2;
  int relop;
  Token tk;
    try {
      exp1 = ShiftExpr(method,library);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case LE:
      case GT:
      case LT:
      case GE:
      case NE:
                          tk = getToken(1);
        relop = RelOp();
        exp2 = ShiftExpr(method,library);
                          exp1 = actionRelExpression(tk,relop,exp1,exp2);
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
    } catch (Exception ex) {
                        catchError(ex); skipTo(lsync,rsync);
    }
          {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce un operador relacional
 *
 * RelOp -> <EQ> | <NE> | <GT> | <GE> | <LT> | <LE>
 */
  final public int RelOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
          {if (true) return BinaryExpression.EQ;}
      break;
    case NE:
      jj_consume_token(NE);
          {if (true) return BinaryExpression.NEQ;}
      break;
    case GT:
      jj_consume_token(GT);
          {if (true) return BinaryExpression.GT;}
      break;
    case GE:
      jj_consume_token(GE);
          {if (true) return BinaryExpression.GE;}
      break;
    case LT:
      jj_consume_token(LT);
          {if (true) return BinaryExpression.LT;}
      break;
    case LE:
      jj_consume_token(LE);
          {if (true) return BinaryExpression.LE;}
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Analiza una expresión de desplazamiento a nivel de bit, es decir, formada por una lista de
 * desplazamientos a nivel de bit (operaciones <<, >>, >>>).
 *
 * ShiftExpr -> SumExpr ( ShiftOp SumExpr )*
 */
  final public Expression ShiftExpr(Method method, Library library) throws ParseException {
  int[] lsync = { };
  int[] rsync = { SEMICOLON, COMMA, RPAREN, OR, AND, BIT_OR, XOR, BIT_AND, EQ, NE, GT, GE, LT, LE };
  Expression exp1 = null, exp2;
  Token tk;
  int shiftop;
    try {
      exp1 = SumExpr(method,library);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LSHIFT:
        case RUNSIGNEDSHIFT:
        case RSIGNEDSHIFT:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_18;
        }
                    tk = getToken(1);
        shiftop = ShiftOp();
        exp2 = SumExpr(method,library);
                          exp1 = actionShiftExpression(tk,shiftop,exp1,exp2);
      }
    } catch (Exception ex) {
                        catchError(ex); skipTo(lsync,rsync);
    }
          {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce un operador relacional
 *
 * ShiftOp -> <LSHIFT> | <RSIGNEDSHIFT> | <RUNSIGNEDSHIFT> 
 */
  final public int ShiftOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSHIFT:
      jj_consume_token(LSHIFT);
              {if (true) return BinaryExpression.LSHIFT;}
      break;
    case RSIGNEDSHIFT:
      jj_consume_token(RSIGNEDSHIFT);
                    {if (true) return BinaryExpression.RSIGNEDSHIFT;}
      break;
    case RUNSIGNEDSHIFT:
      jj_consume_token(RUNSIGNEDSHIFT);
                      {if (true) return BinaryExpression.RUNSIGNEDSHIFT;}
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Analiza una expresión aritmética. Los operadores aritméticos
 * de menor prioridad son la suma y la resta. Por tanto, una
 * expresión aritmética es una suma o resta de términos.
 *
 * SumExpr -> UnOp  ProdExpr  ( SumOp  ProdExpr )*
 */
  final public Expression SumExpr(Method method, Library library) throws ParseException {
  int[] lsync = { };
  int[] rsync = { SEMICOLON, COMMA, RPAREN, OR, AND, BIT_OR, XOR, BIT_AND, EQ, NE, GT, GE, LT, LE, LSHIFT, RSIGNEDSHIFT, RUNSIGNEDSHIFT };
  Expression exp1 = null, exp2;
  int unop;
  int sumop;
  Token tk;
    try {
                          tk = getToken(1);
      unop = UnOp();
      exp1 = ProdExpr(method,library);
                          exp1 = actionUnaryExpression(tk, unop,exp1);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_19;
        }
                          tk = getToken(1);
        sumop = SumOp();
        exp2 = ProdExpr(method,library);
                          exp1 = actionSumExpression(tk,sumop,exp1,exp2);
      }
    } catch (Exception ex) {
                        catchError(ex); skipTo(lsync,rsync);
    }
          {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce un operador unario (NONE si no encuentra ninguno)
 *
 * UnOp -> ( <NOT> | <PLUS> | <MINUS>)?
 */
  final public int UnOp() throws ParseException {
        int op = UnaryExpression.NONE;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
             op = UnaryExpression.NOT;
        break;
      case MINUS:
        jj_consume_token(MINUS);
                op = UnaryExpression.MINUS;
        break;
      case PLUS:
        jj_consume_token(PLUS);
               op = UnaryExpression.PLUS;
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
          {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce un operador de adición
 *
 * SumOp -> ( <PLUS> | <MINUS> )
 */
  final public int SumOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
               {if (true) return BinaryExpression.MINUS;}
      break;
    case PLUS:
      jj_consume_token(PLUS);
               {if (true) return BinaryExpression.PLUS;}
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una expresiómn multiplicativa
 *
 * ProdExpr -> Complemento ( MultOp Complemento )*
 */
  final public Expression ProdExpr(Method method, Library library) throws ParseException {
  Expression exp1 = null, exp2;
  int multop;
  Token tk;
  int[] lsync = { };
  int[] rsync = { SEMICOLON, COMMA, RPAREN, OR, AND, BIT_OR, XOR, BIT_AND, EQ, NE, GT, GE, LT, LE, LSHIFT, RSIGNEDSHIFT, RUNSIGNEDSHIFT, PLUS, MINUS };
    try {
      exp1 = Complemento(method,library);
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PROD:
        case DIV:
        case MOD:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_20;
        }
                  tk = getToken(1);
        multop = MultOp();
        exp2 = Complemento(method,library);
                  exp1 = actionProdExpression(tk,multop,exp1,exp2);
      }
    } catch (Exception ex) {
                        catchError(ex); skipTo(lsync,rsync);
    }
          {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce un operador multiplicativo
 *
 * MultOp -> ( <PROD> | <DIV> | <MOD> )
 */
  final public int MultOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROD:
      jj_consume_token(PROD);
              {if (true) return BinaryExpression.PROD;}
      break;
    case DIV:
      jj_consume_token(DIV);
              {if (true) return BinaryExpression.DIV;}
      break;
    case MOD:
      jj_consume_token(MOD);
              {if (true) return BinaryExpression.MOD;}
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una operacion de complemento a 1
 *
 * Complemento -> (<TILDE>)? Factor
 */
  final public Expression Complemento(Method method, Library library) throws ParseException {
  int[] lsync = { };
  int[] rsync = {SEMICOLON, COMMA, RPAREN, OR, AND, BIT_OR, XOR, BIT_AND, EQ, NE, GT, GE, LT, LE, LSHIFT, RSIGNEDSHIFT, RUNSIGNEDSHIFT, PLUS, MINUS, PROD, DIV, MOD};
  Expression exp=null;
  int unop = UnaryExpression.NONE;
  Token tk;
    try {
                          tk = getToken(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        jj_consume_token(TILDE);
                            unop=UnaryExpression.TILDE;
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      exp = Factor(method,library);
                          exp = actionUnaryExpression(tk,unop,exp);
    } catch (Exception ex) {
                        catchError(ex); skipTo(lsync,rsync);
    }
          {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce un factor dentro de una expresión multiplicativa
 *
 * Factor -> Literal | Reference | <LPAREN> Expr <RPAREN>
 */
  final public Expression Factor(Method method, Library library) throws ParseException {
  Expression exp = null;
  int[] lsync = { };
  int[] rsync = { SEMICOLON, COMMA, RPAREN, OR, AND, BIT_OR, XOR, BIT_AND, EQ, NE, GT, GE, LT, LE, LSHIFT, RSIGNEDSHIFT, RUNSIGNEDSHIFT, PLUS, MINUS, PROD, DIV, MOD };
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case TRUE:
      case INTEGER_LITERAL:
      case CHAR_LITERAL:
        exp = Literal(method, library);
        break;
      case IDENTIFIER:
        exp = Reference(method, library);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        exp = Expr(method,library);
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Exception ex) {
                        catchError(ex); skipTo(lsync,rsync);
    }
          {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce un literal de tipo entero, carácter o booleano
 *
 * Literal -> <INTEGER_LITERAL> | <CHAR_LITERAL> | <TRUE> | <FALSE>
 */
  final public Expression Literal(Method method, Library library) throws ParseException {
        Token tk;
        Expression exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      tk = jj_consume_token(INTEGER_LITERAL);
                            exp = actionIntegerLiteral(tk);
      break;
    case CHAR_LITERAL:
      tk = jj_consume_token(CHAR_LITERAL);
                            exp = new CharLiteralExpression(tk.image);
      break;
    case TRUE:
      jj_consume_token(TRUE);
                            exp = new BooleanLiteralExpression(true);
      break;
    case FALSE:
      jj_consume_token(FALSE);
                            exp = new BooleanLiteralExpression(false);
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una referencia a una variable o la llamada a un método
 *
 * Reference -> <IDENTIFIER> ( MethodCall | <DOT> <IDENTIFIER> MethodCall )?
 */
  final public Expression Reference(Method method, Library library) throws ParseException {
        Token tid1 = null, tid2 = null;
        CallParameters param = null;
    tid1 = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case DOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        param = MethodCall(method,library);
        break;
      case DOT:
        jj_consume_token(DOT);
        tid2 = jj_consume_token(IDENTIFIER);
        param = MethodCall(method,library);
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
          {if (true) return actionReferenceExpression(method,library,tid1,tid2,param);}
    throw new Error("Missing return statement in function");
  }

/**
 * Símbolo que reconoce los parámetros de llamada a un método.
 * Por ejemplo: " ( 3, a, b+c ) "
 *
 * MethodCall -> <LPAREN> ( Expr  ( <COMMA> Expr )* )?  <RPAREN>
 */
  final public CallParameters MethodCall(Method method, Library library) throws ParseException {
        CallParameters param = new CallParameters();
        Expression exp;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case INTEGER_LITERAL:
    case CHAR_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case NOT:
    case PLUS:
    case MINUS:
    case TILDE:
      exp = Expr(method, library);
                                     param.addParameter(exp);
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_21;
        }
        jj_consume_token(COMMA);
        exp = Expr(method,library);
                                              param.addParameter(exp);
      }
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
     {if (true) return param;}
    throw new Error("Missing return statement in function");
  }

  void skipTo(int[] left, int[] right) throws ParseException {
  Token prev = getToken(0);
  Token next = getToken(1);
  boolean flag = false;
  if(prev.kind == EOF || next.kind == EOF) flag = true;
  for(int i=0; i<left.length; i++) if(prev.kind == left[i]) flag = true;
  for(int i=0; i<right.length; i++) if(next.kind == right[i]) flag = true;

  while(!flag) {
    getNextToken();
    prev = getToken(0);
    next = getToken(1);
    if(prev.kind == EOF || next.kind == EOF) flag = true;
    for(int i=0; i<left.length; i++) if(prev.kind == left[i]) flag = true;
    for(int i=0; i<right.length; i++) if(next.kind == right[i]) flag = true;
  }
  }

  /** Generated Token Manager. */
  public TintoParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[51];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000,0x2100900,0x2100900,0x100900,0x0,0x100900,0x4d65b00,0x4d65b00,0x0,0x0,0x8000,0x2400,0x2400,0x4d65b00,0x4d65b00,0x100900,0x89010000,0x0,0x0,0x0,0x0,0x0,0x100900,0x0,0x0,0x0,0x89010000,0x0,0x4d65b00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x89010000,0x89010000,0x0,0x0,0x0,0x89010000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x80,0x0,0x29,0x29,0x80,0x200,0x0,0x0,0x0,0x29,0x29,0x1,0x81c0003,0x1,0x80,0x302,0x80,0x302,0x1,0x302,0x80,0x302,0x81c0003,0x302,0x29,0x10000,0x20000,0x2000000,0x4000000,0x1000000,0xfc00,0xfc00,0x70000000,0x70000000,0x180000,0x1c0000,0x1c0000,0x180000,0xe00000,0xe00000,0x8000000,0x3,0x0,0x102,0x102,0x80,0x81c0003,};
   }

  /** Constructor with InputStream. */
  public TintoParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TintoParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TintoParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public TintoParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TintoParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public TintoParser(TintoParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TintoParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[63];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 51; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
